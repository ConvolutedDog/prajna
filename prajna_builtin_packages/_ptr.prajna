
template <Type>
struct Ptr{
    raw_ptr: __ptr<Type>;
}

template <Type>
implement Ptr<Type>{
    @static
    func Allocate(size: i64)->Ptr<Type>{
        var self: Ptr<Type>;
        self.raw_ptr =  __bit_cast<__ptr<undef> ,__ptr<Type>>(bindings::malloc(__mul<i64>(size, __sizeof<Type>())));
        bindings::RegisterReferenceCount(__bit_cast<__ptr<Type> ,__ptr<undef>>(self.raw_ptr));
        bindings::IncrementReferenceCount(__bit_cast<__ptr<Type> ,__ptr<undef>>(self.raw_ptr));
        return self;
    }

    @static
    func New()->Ptr<Type>{
        var t = Allocate(1);
        return t;
    }

    @static
    func Null()->Ptr<Type>{
        var self: Ptr<Type>;
        self.raw_ptr = __cast<i64, __ptr<Type>>(0);
        return self;
    }

    func _ToInt64()->i64{
        return __cast<__ptr<Type>, i64>(this.raw_ptr);
    }

    // 因为内存计数是直接通过指针地址来记录的. 所以只要他们有相同的机制, 那么指针的传输, 转变不会导致错误.
    func ToUndef()->Ptr<undef>{
        var undef_ptr: Ptr<undef>;
        undef_ptr.raw_ptr = __bit_cast<__ptr<Type> ,__ptr<undef>>(this.raw_ptr);
        return undef_ptr;
    }

    @static
    func FromUndef(undef_ptr: Ptr<undef>)->Ptr<Type>{
        var self: Ptr<Type>;
        self.raw_ptr = __bit_cast<__ptr<undef> ,__ptr<Type>>(undef_ptr.raw_ptr);
        return self;
    }

    func IsNull()->bool{
        return this._ToInt64() == 0;
    }

    func ReferenceCount()->i64 {
        return bindings::GetReferenceCount(__bit_cast<__ptr<Type> ,__ptr<undef>>(this.raw_ptr));
    }

    @static
    func FromThisRawPointer(this_raw_pointer: __ptr<Type>)->Ptr<Type>{
        var this_pointer: Ptr<Type>;
        this_pointer.raw_ptr = this_raw_pointer;
        bindings::IncrementReferenceCount(__bit_cast<__ptr<Type> ,__ptr<undef>>(this_pointer.raw_ptr));
        return this_pointer;
    }

    template <Interface>
    func As()->dynamic<Interface> {
        return __as<Type, Interface>(this);
    }
}

template <Type>
implement operator::LinearIndex<Type> for Ptr<Type> {
    func Get(index: i64)->Type {
        return  this.raw_ptr[index];
    }
    func Set(index: i64, value: Type) {
        this.raw_ptr[index] = value;
    }
}

template <Type>
implement ReferenceCountable for Ptr<Type> {
    func RegisterReferenceCount() {
        bindings::RegisterReferenceCount(__bit_cast<__ptr<Type> ,__ptr<undef>>(this.raw_ptr));
    }

    func IncrementReferenceCount() {
        bindings::IncrementReferenceCount(__bit_cast<__ptr<Type> ,__ptr<undef>>(this.raw_ptr));
    }

    func DecrementReferenceCount() {
        bindings::DecrementReferenceCount(__bit_cast<__ptr<Type> ,__ptr<undef>>(this.raw_ptr));
        if (__eq<i64>(bindings::GetReferenceCount(__bit_cast<__ptr<Type> ,__ptr<undef>>(this.raw_ptr)), 0)){
            if (!this.IsNull()){
                bindings::free(__bit_cast<__ptr<Type> ,__ptr<undef>>(this.raw_ptr));
                this.raw_ptr = __cast<i64, __ptr<Type>>(0);
            }
        }
    }
}

template <Type>
implement Initializable for Ptr<Type> {
    func Initialize() {
        this.raw_ptr = __cast<i64, __ptr<Type>>(0);
        this.RegisterReferenceCount();
    }
}

template <Type>
implement operator::Equal<Ptr<Type>> for Ptr<Type> {
    func Equal(operand: Ptr<Type>) -> bool {
        return this._ToInt64() == operand._ToInt64();
    }
}


template <Type>
implement operator::NotEqual<Ptr<Type>> for Ptr<Type> {
    func NotEqual(operand: Ptr<Type>) -> bool {
        return !(this == operand);
    }
}
