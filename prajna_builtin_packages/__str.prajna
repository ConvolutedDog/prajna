struct str{
    data: char*;
    size: i64;
    buffer_size : i64;
}

implement str{
    @static
    func create(size: i64)->str{
        var str_re: str;
        str_re.size = size;
        str_re.buffer_size = (str_re.size + 1) * 2;
        str_re.data = cast<char *>(bindings::malloc(str_re.buffer_size));
        str_re.data[str_re.size] = '\0';
        return str_re;
    }

    @static
    func from_char_ptr(data: char*)->str {
        var str_re: str;
        str_re.size = 0;
        while (data[str_re.size] != '\0'){
            str_re.size = str_re.size + 1;
        }
        str_re.data = cast<char *>(bindings::malloc(str_re.size + 100));

        var i = 0;
        while (i != str_re.size + 1){
            str_re.data[i] = data[i];
            i = i + 1;
        }

        return str_re;
    }

    func print(){
        print_c(this.data);
    }

    func append(v: char){
        this.size = this.size + 1;
        if (this.size > this.buffer_size){
            this.buffer_size = this.size * 2;
            var new_data = cast<char *>(bindings::malloc(this.buffer_size));
            var i = 0;
            while (i != this.size - 1){
                new_data[i] = this.data[i];
                i = i + 1;
            }
            this.data = new_data;
        }
        this.data[this.size-1] = v;
        this.data[this.size] = '\0';
    }

    func tostr()->str{
        return this;
    }
}

implement operator::Add<str> for str {
    func Add(str_re: str)->str{
        var new_str = str::create(this.size + str_re.size);
        var i = 0;
        while (i < this.size){
            new_str.data[i] = this.data[i];
            i = i + 1;
        }
        var j = 0;
        while ( i < new_str.size ){
            new_str.data[i] = str_re.data[j];
            j = j + 1;
            i = i + 1;
        }

        return new_str;
    }
}

func print(ss: str){
    ss.print();
}

export str;
export print;
