struct str{
    darray: DynamicArray<char>;
    size: i64;
}

implement str{
    @static
    func create(size: i64)->str{
        var str_re: str;
        str_re.darray = DynamicArray<char>::create(size+1);
        str_re.size = size;
        return str_re;
    }

    @static
    func from_char_ptr(cstr_ptr: char*)->str {
        var str_size = 0;
        while (cstr_ptr[str_size] != '\0'){
            str_size = str_size + 1;
        }
        var str_re = str::create(str_size);
        for i in 0 to str_re.size {
            str_re.darray[i] = cstr_ptr[i];
        }

        return str_re;
    }

    func print(){
        print_c(this.darray.data.raw_ptr);
    }

    func append(v: char){
        this.darray.pushBack('\0');
        this.size = this.size + 1;
        this.darray[this.size-1] = v;
        // this.darray[this.size] = '\0';
    }


    @property("[", "getter")
    func index_getter(idx: i64)->char{
        return this.darray[idx];
    }

    @property("[", "setter")
    func index_setter(idx: i64, value: char){
        this.darray[idx] = value;
    }


    func tostr()->str{
        return this;
    }
}

implement operator::Add<str> for str {
    func Add(str_re: str)->str{
        var new_str = str::create(this.size + str_re.size);
        var i = 0;
        while (i < this.size){
            new_str.darray[i] = this.darray[i];
            i = i + 1;
        }
        var j = 0;
        while ( i < new_str.size ){
            new_str.darray[i] = str_re.darray[j];
            j = j + 1;
            i = i + 1;
        }

        return new_str;
    }
}

func print(ss: str){
    ss.print();
}

export str;
export print;
