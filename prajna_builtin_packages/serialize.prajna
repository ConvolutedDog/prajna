implement Serializable for i64{

    func tostr()->str{
        if (this == 0){
            return "0";
        }

        var temp = this;
        if (this < 0){
            temp = - this;
        }

        ///max bit  is  19(not include sign)
        var inverse_re = "";
        while (temp != 0){
            inverse_re.append((temp%10 +'0'.toi64()).tochar());
            temp = temp / 10;
        }

        var re = str::create(inverse_re.size);
        var j = 0;
        while (j < re.size){
            re.darray[j] = inverse_re.darray[inverse_re.size-j-1];
            j = j + 1;
        }

        if (this > 0){
            return re;
        } else {
            return "-" + re;
        }
    }

}


implement Serializable for bool{
    func tostr()->str{
        if (this){
            return "true";
        } else {
            return "false";
        }
    }
}



implement Serializable for i32{
    func tostr()->str{
        return this.toi64().tostr();
    }
}

implement Serializable for u32{
    func tostr()->str{
        return this.toi64().tostr();
    }
}


implement Serializable for f32{

func tostr()->str{
    var x = this;
    var n = 4;
    var rounder = 0.00005;
    x = x + rounder;
    var re = str::create(0);

    if (x < 0.0){
        re.append('-');
        x = -x;
    }

    var int_part = x.toi64();
    re = re  + int_part.tostr();
    x = x - int_part.tof32();

    var j = 0;
    if (x < 1.0){
        re.append('.');
        while (n > 0){
            x = x * 10.0;
            int_part = x.toi64();
            re.append((x.toi64() + '0'.toi64()).tochar());
            x = x - int_part.tof32();
            n = n - 1;
        }
    }

    return re;
}

}

template <Type_, Dim_>
implement Serializable for Array<Type_, Dim_>{
    func tostr()->str{
        var re = "[";
        for i in 0 to Dim_ {
            re = re + this[i].tostr() + ",";
        }
        re = re + "]";

        return re;
    }
}

