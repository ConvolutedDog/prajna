template <Bits>
implement Serializable for Uint<Bits>{
    func ToString()->String{
        var zero = 0i64.Cast<Uint<Bits>>();
        var one = 1i64.Cast<Uint<Bits>>();
        var ten = 10i64.Cast<Uint<Bits>>();
        if (this == zero){
            return "0";
        }

        var temp = this;
        var inverse_re = "";
        while (temp != zero){
            inverse_re.Append((temp % ten +'0'.Cast<Uint<Bits>>()).Cast<char>());
            temp = temp / ten;
        }

        var re = String::Create(inverse_re.size);
        var j = 0;
        while (j < re.size){
            re.darray[j] = inverse_re.darray[inverse_re.size-j-1];
            j = j + 1;
        }

        if (this > zero){
            return re;
        } else {
            return "-" + re;
        }
    }
}

template <Bits>
implement Serializable for Int<Bits>{
    func ToString()->String{
        var zero = 0i64.Cast<Int<Bits>>();
        if (this >= zero) {
            return this.Cast<Uint<Bits>>().ToString();
        } else {
            return "-" + ((!this).Cast<Uint<Bits>>() + (1).Cast<Uint<Bits>>()).ToString();
            // -128i8 无法转为128i8, 因为越界了, 会直接崩溃.
            // return "-" + (-this).ToString();
        }
    }
}

implement Serializable for bool{
    func ToString()->String{
        if (this){
            return "true";
        } else {
            return "false";
        }
    }
}


/// TODO 输出位数, 需要重构,
template <Bits>
implement Serializable for Float<Bits>{
    func ToString()->String{
        var x = this;
        var n = 4;
        var rounder = (0.00005f32).Cast<Float<Bits>>();
        var zero = 0i64.Cast<Float<Bits>>();
        var one = 1i64.Cast<Float<Bits>>();
        var ten = 10i64.Cast<Float<Bits>>();
        x = x + rounder;
        // TODO
        // var re = "";
        var re = String::Create(0);

        if (x < zero){
            re.Append('-');
            x = zero-x;
        }

        var int_part = x.Cast<Int<64>>(); // 越界了需要处理
        re = re  + int_part.ToString();
        x = x - int_part.Cast<Float<Bits>>();

        if (x < one){
            re.Append('.');
            while (n > 0){
                x = x * ten;
                int_part = x.Cast<Int<64>>();
                re.Append((x.Cast<Int<64>>() + '0'.Cast<Int<64>>()).Cast<char>());
                x = x - int_part.Cast<Float<Bits>>();
                n = n - 1;
            }
        }

        return re;
    }
}

template <Type, Dim>
implement Serializable for Array<Type, Dim>{
    func ToString()->String{
        var re = "[";
        for i in 0 to Dim {
            re = re + this[i].ToString() + ",";
        }
        re = re + "]";

        return re;
    }
}

implement Serializable for char {
    func ToString()->String{
        var re = String::Create(1);
        re.darray[0] = this;
        return re;
    }
}
