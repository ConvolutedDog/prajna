template <Dim_>
struct Layout{
    shape: Array<i64, Dim_>;
    stride: Array<i64, Dim_>;
}

template <Dim_>
implement Layout<Dim_> {
    @static
    func create(shape: Array<i64, Dim_>)->Layout<Dim_>{
        var self: Layout<Dim_>;
        self.shape = shape;
        var i = Dim_ - 1;
        self.stride[i] = 1;
        while (i > 0){
            i = i - 1;
            self.stride[i] = self.shape[i + 1] * self.stride[i + 1];
        }
        return self;
    }

    func linearIndexToArrayIndex(offset: i64)->Array<i64, Dim_>{
        var array_idx: Array<i64, Dim_>;
        var remain = offset;
        var i = 0;
        while (i < Dim_){
            array_idx[i] = remain / this.stride[i];
            remain = remain % this.stride[i];
            i = i + 1;
        }

        return array_idx;
    }

    func arrayIndexToLinearIndex(idx: Array<i64, Dim_>)->i64{
        var offset = 0;
        var i =  Dim_ - 1;
        while (i >= 0){
            offset = offset + idx[i] * this.stride[i];
            i = i - 1;
        }
        return offset;
    }

    func length()->i64{
        return this.shape[0] * this.stride[0];
    }

}

template <Type_, Dim_>
struct Tensor {
    data : ptr<Type_>;
    layout: Layout<Dim_>;
}

template <Type_, Dim_>
interface atProperty {
    func get(idx: Array<i64, Dim_>)->Type_;
    func set(idx: Array<i64, Dim_>, value: Type_);
}

template <Type_, Dim_>
implement atProperty<Type_, Dim_> for Tensor<Type_, Dim_>{
    func get(idx: Array<i64, Dim_>)->Type_{
        var offset = this.layout.arrayIndexToLinearIndex(idx);
        return this.data.raw_ptr[offset];
    }

    func set(idx: Array<i64, Dim_>, value: Type_){
        var offset = this.layout.arrayIndexToLinearIndex(idx);
        this.data.raw_ptr[offset] = value;
    }
}

template <Type_, Dim_>
implement Tensor<Type_, Dim_> {
    @static
    func create(shape :Array<i64, Dim_>)->Tensor<Type_, Dim_>{
        var self: Tensor<Type_, Dim_>;
        self.layout = Layout<Dim_>::create(shape);

        self.data = ptr<Type_>::allocate(self.layout.length());
        return self;
    }
}

template <Type_, Dim_>
implement operator::ArrayIndex<Type_, Dim_> for Tensor<Type_, Dim_> {
    func get(idx: Array<i64, Dim_>)->Type_{
        return this.at(idx);
    }

    func set(idx: Array<i64, Dim_>, value: Type_){
        this.at(idx) = value;
    }
}
