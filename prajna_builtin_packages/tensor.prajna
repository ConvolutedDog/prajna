template <Dim_>
struct Layout<Dim_>{
    shape: Array<i64, Dim_>;
    stride: Array<i64, Dim_>;
}

template <Dim_>
implement Layout<Dim_>{
    @static
    func create(shape: Array<i64, Dim_>)->Layout<Dim_>{
        var self: Layout<Dim_>;
        self.shape = shape;
        var i = Dim_ - 1;
        self.stride[i] = 1;
        while (i > 0){
            i = i - 1;
            self.stride[i] = self.shape[i + 1] * self.stride[i + 1];
        }
        return self;
    }

    func linearIndexToArrayIndex(offset: i64)->Array<i64, Dim_>{
        var array_idx: Array<i64, Dim_>;
        var remain = offset;
        var i = 0;
        while (i < Dim_){
            array_idx[i] = remain / this.stride[i];
            remain = remain % this.stride[i];
            i = i + 1;
        }

        return array_idx;
    }

    func arrayIndexToLinearIndex(idx: Array<i64, Dim_>)->i64{
        var offset = 0;
        var i =  Dim_ - 1;
        while (i >= 0){
            offset = offset + idx[i] * this.stride[i];
            i = i - 1;
        }
        return offset;
    }

    func length()->i64{
        return this.shape[0] * this.stride[0];
    }

}

template <Type_, Dim_>
struct Tensor<Type_, Dim_> {
    data : Type_*;
    layout: Layout<Dim_>;
}

template <Type_, Dim_>
implement Tensor<Type_, Dim_> {
    @static
    func create(shape :Array<i64, Dim_>)->Tensor<Type_, Dim_>{
        var self: Tensor<Type_, Dim_>;
        self.layout = Layout<Dim_>::create(shape);

        var bytes = self.layout.length() * sizeof(Type_);
        self.data = cast<Type_ *>(bindings::bindings::malloc(bytes));
        bindings::registerReferenceCount(cast<undef*>(self.data));
        bindings::incrementReferenceCount(cast<undef*>(self.data));

        return self;
    }

    func __registerReferenceCount(){
        this.data = __nullptr<Type_>::create();
        bindings::registerReferenceCount(cast<undef*>(this.data));
    }

    func __incrementReferenceCount(){
        bindings::incrementReferenceCount(cast<undef*>(this.data));
    }

    func __decrementReferenceCount(){
        bindings::decrementReferenceCount(cast<undef*>(this.data));
        if (bindings::getReferenceCount(cast<undef*>(this.data)) == 0){
           bindings::free(cast<undef*>(this.data));
        }
    }

    @property("at", "getter")
    func at_getter(idx: Array<i64, Dim_>)->Type_{
        var offset = this.layout.arrayIndexToLinearIndex(idx);
        return this.data[offset];
    }

    @property("at", "setter")
    func at_setter(idx: Array<i64, Dim_>, value: Type_){
        var offset = this.layout.arrayIndexToLinearIndex(idx);
        this.data[offset] = value;
    }

    // index property存在语法糖,
    // ts[0,1] 等价于 ts.index_getter([0,1]); 其会将参数弄成数组
    @property("[", "getter")
    func index_getter(idx: Array<i64, Dim_>)->Type_{
        return this.at(idx);
    }

    @property("[", "setter")
    func index_setter(idx: Array<i64, Dim_>, value: Type_){
        this.at(idx) = value;
    }
}

export Tensor;
export Layout;
