implement operator::Equal<i64> for i64 {
    @instruction("ICmp", "ICMP_EQ")
    func Equal(operand: i64)->bool;
}

implement operator::NotEqual<i64> for i64 {
    @instruction("ICmp", "ICMP_NE")
    func NotEqual(operand: i64)->bool;
}

implement operator::Add<i64> for i64 {
    @instruction("BinaryOperator", "Add")
    func Add(operand: i64)->i64;
}

implement operator::Sub<i64> for i64 {
    @instruction("BinaryOperator", "Sub")
    func Sub(operand: i64)->i64;
}

implement operator::Multiply<i64> for i64 {
    @instruction("BinaryOperator", "Mul")
    func Multiply(operand: i64)->i64;
}

implement operator::Divide<i64> for i64 {
    @instruction("BinaryOperator", "SDiv")
    func Divide(operand: i64)->i64;
}


implement operator::Remaind<i64> for i64 {
    @instruction("BinaryOperator", "SRem")
    func Remaind(operand: i64)->i64;
}

implement operator::Greater<i64> for i64 {
    @instruction("ICmp", "ICMP_SGT")
    func Greater(operand: i64)->bool;
}

implement operator::Less<i64> for i64 {
    @instruction("ICmp", "ICMP_SLT")
    func Less(operand: i64)->bool;
}

implement operator::GreaterOrEqual<i64> for i64 {
    @instruction("ICmp", "ICMP_SGE")
    func GreaterOrEqual(operand: i64)->bool;
}

implement operator::LessOrEqual<i64> for i64 {
    @instruction("ICmp", "ICMP_SLE")
    func LessOrEqual(operand: i64)->bool;
}

implement operator::Negative<i64> for i64 {
    func Negative()->i64 {
        return 0i64 - this;
    }
}
