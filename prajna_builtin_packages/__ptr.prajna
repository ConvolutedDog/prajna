
template <Type>
struct Pointer{
    raw_ptr: Type *;
}

template <Type>
implement Pointer<Type>{
    @static
    func Allocate(size: i64)->Pointer<Type>{
        var self: Pointer<Type>;
        self.raw_ptr =  __bit_cast<undef* ,Type *>(bindings::malloc(__mul<i64>(size, sizeof(Type))));
        bindings::RegisterReferenceCount(__bit_cast<Type* ,undef*>(self.raw_ptr));
        bindings::IncrementReferenceCount(__bit_cast<Type* ,undef*>(self.raw_ptr));
        return self;
    }

    @static
    func New()->Pointer<Type>{
        var t = Allocate(1);
        return t;
    }

    @static
    func Null()->Pointer<Type>{
        var self: Pointer<Type>;
        self.raw_ptr = __cast<i64, Type*>(0);
        return self;
    }

    func _ToInt64()->i64{
        return __cast<Type*, i64>(this.raw_ptr);
    }

    // 因为内存计数是直接通过指针地址来记录的. 所以只要他们有相同的机制, 那么指针的传输, 转变不会导致错误.
    func ToUndef()->Pointer<undef>{
        var undef_ptr: Pointer<undef>;
        undef_ptr.raw_ptr = __bit_cast<Type* ,undef *>(this.raw_ptr);
        return undef_ptr;
    }

    @static
    func FromUndef(undef_ptr: Pointer<undef>)->Pointer<Type>{
        var self: Pointer<Type>;
        self.raw_ptr = __bit_cast<undef* ,Type *>(undef_ptr.raw_ptr);
        return self;
    }

    func IsNull()->bool{
        return this._ToInt64() == 0;
    }

    func ReferenceCount()->i64 {
        return bindings::GetReferenceCount(__bit_cast<Type* ,undef*>(this.raw_ptr));
    }

    @static
    func FromThisRawPointer(this_raw_pointer: Type*)->Pointer<Type>{
        var this_pointer: Pointer<Type>;
        this_pointer.raw_ptr = this_raw_pointer;
        bindings::IncrementReferenceCount(__bit_cast<Type* ,undef*>(this_pointer.raw_ptr));
        return this_pointer;
    }

    template <Interface>
    func As()->dynamic<Interface> {
        return dynamic_cast<Interface>(this);
    }
}

template <Type>
implement operator::LinearIndex<Type> for Pointer<Type> {
    func Get(index: i64)->Type {
        return  this.raw_ptr[index];
    }
    func Set(index: i64, value: Type) {
        this.raw_ptr[index] = value;
    }
}

template <Type>
@disable_dynamic_dispatch
implement reference_count::ReferenceCountable for Pointer<Type> {
    func RegisterReferenceCount() {
        bindings::RegisterReferenceCount(__bit_cast<Type* ,undef*>(this.raw_ptr));
    }

    func Initialize() {
        this.raw_ptr = __cast<i64, Type*>(0);
        this.RegisterReferenceCount();
    }

    func IncrementReferenceCount() {
        bindings::IncrementReferenceCount(__bit_cast<Type* ,undef*>(this.raw_ptr));
    }

    func DecrementReferenceCount() {
        bindings::DecrementReferenceCount(__bit_cast<Type* ,undef*>(this.raw_ptr));
        if (__eq<i64>(bindings::GetReferenceCount(__bit_cast<Type* ,undef*>(this.raw_ptr)), 0)){
            if (!this.IsNull()){
                bindings::free(__bit_cast<Type* ,undef*>(this.raw_ptr));
                this.raw_ptr = __cast<i64, Type*>(0);
            }
        }
    }
}

template <Type>
implement operator::Equal<Pointer<Type>> for Pointer<Type> {
    func Equal(operand: Pointer<Type>) -> bool {
        return this._ToInt64() == operand._ToInt64();
    }
}


template <Type>
implement operator::NotEqual<Pointer<Type>> for Pointer<Type> {
    func NotEqual(operand: Pointer<Type>) -> bool {
        return !(this == operand);
    }
}
