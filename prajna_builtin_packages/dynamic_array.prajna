func CeilPowerOf2(value: i64)->i64{
    // TODO
    debug::Assert(value >= 0);
    var re = 1;
    while (re < value) {
        re = re * 2;
    }
    return re;
}

template <ValueType>
struct DynamicArray{
    data: Ptr<ValueType>;
    length: i64;
    capacity: i64;
}

template <ValueType>
implement operator::LinearIndex<ValueType> for DynamicArray<ValueType> {
    func Get(idx: i64)->ValueType{
        return this.data.raw_ptr[idx];
    }

    func Set(idx: i64, value: ValueType){
        this.data.raw_ptr[idx] = value;
    }
}

template <ValueType>
implement DynamicArray<ValueType> {
    @static
    func Create(length: i64)->DynamicArray<ValueType>{
        var self: DynamicArray<ValueType>;
        self.length = length;
        self.capacity = CeilPowerOf2(length);
        self.data = Ptr<ValueType>::Allocate(self.capacity);
        return self;
    }

    func PushBack(value: ValueType) {
        if (this.length + 1 > this.capacity) {
            var new_self = Create(this.length + 1);
            for idx in 0 to this.length {
                new_self[idx] = this[idx];
            }
            this = new_self;
        } else {
            this.length = this.length + 1;
        }

        this[this.length-1] = value;
    }
}
