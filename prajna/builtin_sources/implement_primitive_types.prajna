
@intrinsic("llvm.sin.f32")
func sin_f32(v: f32)->f32;

implement bool {
    @instruction("ICmp", "ICMP_EQ")
    @binary("==")
    func __equal__(rhs : bool)->bool;

    @instruction("ICmp", "ICMP_NE")
    @binary("!=")
    func __not_equal__(rhs : bool)->bool;

    @instruction("BinaryOperator", "And")
    @binary("&")
    func __and__(rhs: bool)->bool;

    @instruction("BinaryOperator", "Or")
    @binary("|")
    func __or__(rhs: bool)->bool;

    @instruction("BinaryOperator", "Xor")
    @binary("^")
    func __xor__(rhs: bool)->bool;

    @unary("!")
    func __not__()->bool{
        return true ^ this;
    }
}

implement char {
    @instruction("ICmp", "ICMP_EQ")
    @binary("==")
    func __equal__(rhs : char)->bool;

    @instruction("ICmp", "ICMP_NE")
    @binary("!=")
    func __not_equal__(rhs : char)->bool;

    @instruction("CastInst", "SExt", "i64")
    func toi64()->i64;
}

implement i8 {
    @instruction("ICmp", "ICMP_EQ")
    @binary("==")
    func __equal__(rhs : i8)->bool;

    @instruction("ICmp", "ICMP_NE")
    @binary("!=")
    func __not_equal__(rhs : i8)->bool;

    @instruction("ICmp", "ICMP_SGT")
    @binary(">")
    func __greater__(rhs : i8)->bool;

    @instruction("ICmp", "ICMP_SLT")
    @binary("<")
    func __less__(rhs : i8)->bool;

    @instruction("ICmp", "ICMP_SGE")
    @binary(">=")
    func __greater_or_equal__(rhs : i8)->bool;

    @instruction("ICmp", "ICMP_SLE")
    @binary("<=")
    func __less_or_equal__(rhs : i8)->bool;

    @instruction("BinaryOperator", "Add")
    @binary("+")
    func __add__(rhs: i8)->i8;

    @instruction("BinaryOperator", "Sub")
    @binary("-")
    func __sub__(rhs: i8)->i8;

    @instruction("BinaryOperator", "Mul")
    @binary("*")
    func __multiply__(rhs: i8)->i8;

    @instruction("BinaryOperator", "SDiv")
    @binary("/")
    func __divide__(rhs: i8)->i8;

    @instruction("BinaryOperator", "SRem")
    @binary("%")
    func __remain__(rhs: i8)->i8;

    @unary("+")
    func __unary_add__()->i8{
        return this;
    }

    @unary("-")
    func __unary_sub__()->i8{
        return 0i8 - this;
    }

    @instruction("CastInst", "SExt", "i64")
    func toi64()->i64;

    @instruction("CastInst", "SIToFP", "f32")
    func tof32()->f32;

    @instruction("CastInst", "Trunc", "char")
    func tochar()->char;
}

implement i16 {
    @instruction("ICmp", "ICMP_EQ")
    @binary("==")
    func __equal__(rhs : i16)->bool;

    @instruction("ICmp", "ICMP_NE")
    @binary("!=")
    func __not_equal__(rhs : i16)->bool;

    @instruction("ICmp", "ICMP_SGT")
    @binary(">")
    func __greater__(rhs : i16)->bool;

    @instruction("ICmp", "ICMP_SLT")
    @binary("<")
    func __less__(rhs : i16)->bool;

    @instruction("ICmp", "ICMP_SGE")
    @binary(">=")
    func __greater_or_equal__(rhs : i16)->bool;

    @instruction("ICmp", "ICMP_SLE")
    @binary("<=")
    func __less_or_equal__(rhs : i16)->bool;

    @instruction("BinaryOperator", "Add")
    @binary("+")
    func __add__(rhs: i16)->i16;

    @instruction("BinaryOperator", "Sub")
    @binary("-")
    func __sub__(rhs: i16)->i16;

    @instruction("BinaryOperator", "Mul")
    @binary("*")
    func __multiply__(rhs: i16)->i16;

    @instruction("BinaryOperator", "SDiv")
    @binary("/")
    func __divide__(rhs: i16)->i16;

    @instruction("BinaryOperator", "SRem")
    @binary("%")
    func __remain__(rhs: i16)->i16;

    @unary("+")
    func __unary_add__()->i16{
        return this;
    }

    @unary("-")
    func __unary_sub__()->i16{
        return 0i16 - this;
    }

    @instruction("CastInst", "SExt", "i64")
    func toi64()->i64;

    @instruction("CastInst", "SIToFP", "f32")
    func tof32()->f32;

    @instruction("CastInst", "Trunc", "char")
    func tochar()->char;
}

implement i32 {
    @instruction("ICmp", "ICMP_EQ")
    @binary("==")
    func __equal__(rhs : i32)->bool;

    @instruction("ICmp", "ICMP_NE")
    @binary("!=")
    func __not_equal__(rhs : i32)->bool;

    @instruction("ICmp", "ICMP_SGT")
    @binary(">")
    func __greater__(rhs : i32)->bool;

    @instruction("ICmp", "ICMP_SLT")
    @binary("<")
    func __less__(rhs : i32)->bool;

    @instruction("ICmp", "ICMP_SGE")
    @binary(">=")
    func __greater_or_equal__(rhs : i32)->bool;

    @instruction("ICmp", "ICMP_SLE")
    @binary("<=")
    func __less_or_equal__(rhs : i32)->bool;

    @instruction("BinaryOperator", "Add")
    @binary("+")
    func __add__(rhs: i32)->i32;

    @instruction("BinaryOperator", "Sub")
    @binary("-")
    func __sub__(rhs: i32)->i32;

    @instruction("BinaryOperator", "Mul")
    @binary("*")
    func __multiply__(rhs: i32)->i32;

    @instruction("BinaryOperator", "SDiv")
    @binary("/")
    func __divide__(rhs: i32)->i32;

    @instruction("BinaryOperator", "SRem")
    @binary("%")
    func __remain__(rhs: i32)->i32;

    @unary("+")
    func __unary_add__()->i32{
        return this;
    }

    @unary("-")
    func __unary_sub__()->i32{
        return 0i32 - this;
    }

    @instruction("CastInst", "SExt", "i64")
    func toi64()->i64;

    @instruction("CastInst", "SIToFP", "f32")
    func tof32()->f32;

    @instruction("CastInst", "Trunc", "char")
    func tochar()->char;
}

implement i64 {
    @instruction("ICmp", "ICMP_EQ")
    @binary("==")
    func __equal__(rhs : i64)->bool;

    @instruction("ICmp", "ICMP_NE")
    @binary("!=")
    func __not_equal__(rhs : i64)->bool;

    @instruction("ICmp", "ICMP_SGT")
    @binary(">")
    func __greater__(rhs : i64)->bool;

    @instruction("ICmp", "ICMP_SLT")
    @binary("<")
    func __less__(rhs : i64)->bool;

    @instruction("ICmp", "ICMP_SGE")
    @binary(">=")
    func __greater_or_equal__(rhs : i64)->bool;

    @instruction("ICmp", "ICMP_SLE")
    @binary("<=")
    func __less_or_equal__(rhs : i64)->bool;

    @instruction("BinaryOperator", "Add")
    @binary("+")
    func __add__(rhs: i64)->i64;

    @instruction("BinaryOperator", "Sub")
    @binary("-")
    func __sub__(rhs: i64)->i64;

    @instruction("BinaryOperator", "Mul")
    @binary("*")
    func __multiply__(rhs: i64)->i64;

    @instruction("BinaryOperator", "SDiv")
    @binary("/")
    func __divide__(rhs: i64)->i64;

    @instruction("BinaryOperator", "SRem")
    @binary("%")
    func __remain__(rhs: i64)->i64;

    @unary("+")
    func __unary_add__()->i64{
        return this;
    }

    @unary("-")
    func __unary_sub__()->i64{
        return 0 - this;
    }

    @instruction("CastInst", "SIToFP", "f32")
    func tof32()->f32;

    @instruction("CastInst", "Trunc", "i32")
    func toi32()->i32;

    @instruction("CastInst", "Trunc", "u32")
    func tou32()->u32;

    @instruction("CastInst", "Trunc", "char")
    func tochar()->char;
}

implement u32 {
    @instruction("ICmp", "ICMP_EQ")
    @binary("==")
    func __equal__(rhs : u32)->bool;

    @instruction("ICmp", "ICMP_NE")
    @binary("!=")
    func __not_equal__(rhs : u32)->bool;

    @instruction("ICmp", "ICMP_SGT")
    @binary(">")
    func __greater__(rhs : u32)->bool;

    @instruction("ICmp", "ICMP_SLT")
    @binary("<")
    func __less__(rhs : u32)->bool;

    @instruction("ICmp", "ICMP_SGE")
    @binary(">=")
    func __greater_or_equal__(rhs : u32)->bool;

    @instruction("ICmp", "ICMP_SLE")
    @binary("<=")
    func __less_or_equal__(rhs : u32)->bool;

    @instruction("BinaryOperator", "Add")
    @binary("+")
    func __add__(rhs: u32)->u32;

    @instruction("BinaryOperator", "Sub")
    @binary("-")
    func __sub__(rhs: u32)->u32;

    @instruction("BinaryOperator", "Mul")
    @binary("*")
    func __multiply__(rhs: u32)->u32;

    @instruction("BinaryOperator", "UDiv")
    @binary("/")
    func __divide__(rhs: u32)->u32;

    @instruction("BinaryOperator", "URem")
    @binary("%")
    func __remain__(rhs: u32)->u32;

    @unary("+")
    func __unary_add__()->u32{
        return this;
    }

    // @unary("-")
    // func __unary_sub__()->u32{
    // //     return 0 - this;
    // }

    @instruction("CastInst", "ZExt", "i64")
    func toi64()->i64;

    @instruction("CastInst", "UIToFP", "f32")
    func tof32()->f32;

    @instruction("CastInst", "Trunc", "char")
    func tochar()->char;
}

implement f32 {
    @instruction("FCmp", "FCMP_OEQ")
    @binary("==")
    func __equal__(rhs : f32)->bool;

    @instruction("FCmp", "FCMP_ONE")
    @binary("!=")
    func __not_equal__(rhs : f32)->bool;

    @instruction("FCmp", "FCMP_OGT")
    @binary(">")
    func __greater__(rhs : f32)->bool;

    @instruction("FCmp", "FCMP_OLT")
    @binary("<")
    func __less__(rhs : f32)->bool;

    @instruction("FCmp", "FCMP_OGE")
    @binary(">=")
    func __greater_or_equal__(rhs : f32)->bool;

    @instruction("FCmp", "FCMP_OLE")
    @binary("<=")
    func __less_or_equal__(rhs : f32)->bool;

    @instruction("BinaryOperator", "FAdd")
    @binary("+")
    func __add__(rhs: f32)->f32;

    @instruction("BinaryOperator", "FSub")
    @binary("-")
    func __sub__(rhs: f32)->f32;

    @instruction("BinaryOperator", "FMul")
    @binary("*")
    func __multiply__(rhs: f32)->f32;

    @instruction("BinaryOperator", "FDiv")
    @binary("/")
    func __divide__(rhs: f32)->f32;

    @instruction("BinaryOperator", "FRem")
    @binary("%")
    func __remain__(rhs: f32)->f32;

    @unary("+")
    func __unary_add__()->f32{
        return this;
    }

    @unary("-")
    func __unary_sub__()->f32{
        return 0.0 - this;
    }

    @instruction("CastInst", "FPToSI", "i64")
    func toi64()->i64;

    func sin()->f32{
        return sin_f32(this);
    }
}

struct ptr<T: template>{

}

implement ptr<T: template>{
    @static
    func null()->T *{
        var pointer: T*;
        // @warning 注意不同位数平台可能产生问题,
        *cast<i64 *>(&pointer) = 0;
        return pointer;
    }
}

export ptr;

export sin_f32;
