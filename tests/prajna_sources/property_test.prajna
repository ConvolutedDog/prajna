
struct People{
    name: String;
    _age: i64;
}

implement People{
    func __get__Age()->i64{
        return this._age;
    }

    func __set__Age(v: i64){
        this._age = v;
    }
}

@test
func TestProperty(){
    var people: People;
    people.name = "Mike";
    people._age =  18;
    test::Assert(people._age == 18);
    // 我们可以像字段一样使用属性
    test::Assert(people.Age == 18);
    people.Age = 22;
    test::Assert(people._age == 22);
    test::Assert(people.Age == 22);

    people.Age;
}

struct Group{
    _leader: People;
}

implement Group{
    func __get__Leader()->People {
        return this._leader;
    }

    func __set__Leader(v: People) {
        this._leader = v;
    }
}

@test
func TestNestedProperty() {
    var group: Group;
    group._leader._age = 1;
    // TODO(zhangzhimin)
    /*
    */
    group.Leader.Age = 3;
    test::Assert(group._leader.Age == 1);
}
