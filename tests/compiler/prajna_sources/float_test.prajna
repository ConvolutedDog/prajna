template <T>
func assertNear(value0: T, value1: f32, eps: f32){
    debug::Assert((value0 - value1.Cast<T>()).Abs() < eps.Cast<T>());
}

template FloatTest <Bits> {
    @test
    func testFloatStaticFunction() {
        Float<Bits>::Largest();
        Float<Bits>::Smallest();
        Float<Bits>::NaN();
        Float<Bits>::Inf();
    }

    @test
    func testFloatIUnaryFunction(){
        {
            var value = (0.0).Cast<Float<Bits>>();
            var expect = (0.0).Cast<Float<Bits>>();
            test::Assert(value == expect);
            value = (-0.0).Cast<Float<Bits>>();
            expect = (0.0).Cast<Float<Bits>>();
            test::Assert(value == expect);
        }
        {
            var value = (-1.0).Cast<Float<Bits>>();
            var expect = 1.0.Cast<Float<Bits>>();
            test::Assert(value.Abs() == expect);
        }
        {
            var pi = (3.1415926).Cast<Float<Bits>>();
            assertNear<Float<Bits>>(pi.Sin(), 0.0, 0.001);
            pi = (3.1415926/2.0).Cast<Float<Bits>>();
            assertNear<Float<Bits>>(pi.Sin(), 1.0, 0.001);
            pi = (2.0*3.1415926).Cast<Float<Bits>>();
            assertNear<Float<Bits>>(pi.Sin(), 0.0, 0.01);
            var value = (0.5).Cast<Float<Bits>>();
            assertNear<Float<Bits>>(value.Sin(), 0.47943, 0.001);
        }
        {
            var pi = (3.1415926).Cast<Float<Bits>>();
            assertNear<Float<Bits>>(pi.Cos(), -1.0, 0.001);
            pi = (3.1415926/2.0).Cast<Float<Bits>>();
            assertNear<Float<Bits>>(pi.Cos(), 0.0, 0.001);
            pi = (2.0*3.1415926).Cast<Float<Bits>>();
            assertNear<Float<Bits>>(pi.Cos(), 1.0, 0.001);
            var value = (0.5).Cast<Float<Bits>>();
            assertNear<Float<Bits>>(value.Cos(), 0.87758, 0.001);
        }
        {
            var value = (1.3).Cast<Float<Bits>>();
            var expect = (1.0).Cast<Float<Bits>>();
            test::Assert(value.Floor() == expect);
            value = (5.99).Cast<Float<Bits>>();
            expect = (5.0).Cast<Float<Bits>>();
            test::Assert(value.Floor() == expect);

            value = (-0.0001).Cast<Float<Bits>>();
            expect = (-1.0).Cast<Float<Bits>>();
            test::Assert(value.Floor() == expect);
            value = (-5.999).Cast<Float<Bits>>();
            expect = (-6.0).Cast<Float<Bits>>();
            test::Assert(value.Floor() == expect);
            value = (-1234.5678).Cast<Float<Bits>>();
            expect = (-1235.0).Cast<Float<Bits>>();
            test::Assert(value.Floor() == expect);
        }
        {
            var value = (1.3).Cast<Float<Bits>>();
            var expect = (2.0).Cast<Float<Bits>>();
            test::Assert(value.Ceil() == expect);
            value = (5.999).Cast<Float<Bits>>();
            expect = (6.0).Cast<Float<Bits>>();
            test::Assert(value.Ceil() == expect);
            value = (-5.99).Cast<Float<Bits>>();
            expect = (-5.0).Cast<Float<Bits>>();
            test::Assert(value.Ceil() == expect);

            value = (-0.0001).Cast<Float<Bits>>();
            expect = (0.0).Cast<Float<Bits>>();
            test::Assert(value.Ceil() == expect);
            // 存在精度问题, float16的精度没那么高
            // value = (-1234.5678).Cast<Float<Bits>>();
            // expect = (-1234).Cast<Float<Bits>>();
            // test::Assert(value.Ceil() == expect);
        }
        {
            var value = (1.23456789).Cast<Float<Bits>>();
            var expect = (1.0).Cast<Float<Bits>>();
            test::Assert(value.Round() == expect);
            value = (123456789.0).Cast<Float<Bits>>();
            expect = (123456789.0).Cast<Float<Bits>>();
            test::Assert(value.Round() == expect);
            value = (1.5).Cast<Float<Bits>>();
            expect = (2.0).Cast<Float<Bits>>();
            test::Assert(value.Round() == expect);
            value = (-2.4).Cast<Float<Bits>>();
            expect = (-2.0).Cast<Float<Bits>>();
            test::Assert(value.Round() == expect);
            value = (-3.5).Cast<Float<Bits>>();
            expect = (-4.0).Cast<Float<Bits>>();
            test::Assert(value.Round() == expect);
            value = (-0.0).Cast<Float<Bits>>();
            expect = (-0.0).Cast<Float<Bits>>();
            test::Assert(value.Round() == expect);
        }
        {
            var value = (0.12345678901234567890).Cast<Float<Bits>>();
            var expect = (0.0).Cast<Float<Bits>>();
            test::Assert(value.Round() == expect);
            value = (12345678901234567890.0).Cast<Float<Bits>>();
            expect = (12345678901234567890.0).Cast<Float<Bits>>();
            test::Assert(value.Round() == expect);
            value = (12345678901234567890.12345678901234567890).Cast<Float<Bits>>();
            expect = (12345678901234567890.12345678901234567890).Cast<Float<Bits>>();
            test::Assert(value.Round() == expect);
            value = (-0.12345678901234567890).Cast<Float<Bits>>();
            expect = 0i64.Cast<Float<Bits>>();
            test::Assert(value.Round() == expect);
        }
        {
            var value = (2.4).Cast<Float<Bits>>();
            var expect = (2.0).Cast<Float<Bits>>();
            test::Assert(value.RoundEven() == expect);
            value = (-2.4).Cast<Float<Bits>>();
            expect = (-2.0).Cast<Float<Bits>>();
            test::Assert(value.RoundEven() == expect);
            value = (2.5).Cast<Float<Bits>>();
            expect = (2.0).Cast<Float<Bits>>();
            test::Assert(value.RoundEven() == expect);
            value = (-2.5).Cast<Float<Bits>>();
            expect = (-2.0).Cast<Float<Bits>>();
            test::Assert(value.RoundEven() == expect);
            value = (2.6).Cast<Float<Bits>>();
            expect = (3.0).Cast<Float<Bits>>();
            test::Assert(value.RoundEven() == expect);
            value = (3.5).Cast<Float<Bits>>();
            expect = (4.0).Cast<Float<Bits>>();
            test::Assert(value.RoundEven() == expect);
            value = (-3.5).Cast<Float<Bits>>();
            expect = (-4.0).Cast<Float<Bits>>();
            test::Assert(value.RoundEven() == expect);
            value = (-0.0).Cast<Float<Bits>>();
            expect = (-0.0).Cast<Float<Bits>>();
            test::Assert(value.RoundEven() == expect);
        }
        {
            var value = (3.14159).Cast<Float<Bits>>();
            var expect = (3.0).Cast<Float<Bits>>();
            test::Assert(value.Trunc() == expect);
            value = (-6.789).Cast<Float<Bits>>();
            expect = (-6.0).Cast<Float<Bits>>();
            test::Assert(value.Trunc() == expect);

            value = (-2.99).Cast<Float<Bits>>();
            expect = (-2.0).Cast<Float<Bits>>();
            test::Assert(value.Trunc() == expect);
        }
    }
}

@test
func testFloatParse() {
    1.0e10f32;
    10.0e-2f32;
    .24e0f64;
    1.00;
    2.010;
    02.1;
    .24;
    +.24;
    -2.12;
}

use FloatTest<16>;
use FloatTest<32>;
use FloatTest<64>;
