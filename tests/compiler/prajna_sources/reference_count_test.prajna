
struct TestA {
    data: __ptr<undef>;
    name: String;
}

implement ReferenceCountable for TestA {
    func RegisterReferenceCount(){
        bindings::RegisterReferenceCount(this.data);
        // (this.name + " RegisterReferenceCount\n").Print();
    }

    func DecrementReferenceCount(){
        // (this.name + " TestA destropy callback\n").Print();
        bindings::DecrementReferenceCount(this.data);

        var ref_count = bindings::GetReferenceCount(this.data);
        // (this.name + " ref count: " + ref_count.ToString() + "\n").Print();

        if (ref_count == 0 ){
            if (__cast<__ptr<undef>, i64>(this.data) == 0) {
                bindings::free(this.data);
            }
            "free memory\n".Print();
        }

    }

    func IncrementReferenceCount(){
        // (this.name + " TestA __incrementReferenceCount callback\n").Print();
        bindings::IncrementReferenceCount(this.data);

        var ref_count = bindings::GetReferenceCount(this.data);
        // (this.name + " ref count: " + ref_count.ToString() + "\n").Print();
    }
}

implement Initializable for TestA {
    func Initialize(){
        this.name = "undef";
        this.data = __cast<i64, __ptr<undef>>(0);
        this.RegisterReferenceCount();
        // (this.name + " __initialize\n").Print();
    }
}

implement TestA {
    @static
    func Create(bytes: i64)->TestA{
        var self: TestA;
        self.data = bindings::malloc(bytes);
        "malloc memory\n".Print();
        self.name = "create_self";

        self.RegisterReferenceCount();
        self.IncrementReferenceCount();

        return self; // 调用 copy函数
        // 退出时会调用destropy 函数
    }
}

@test
func TestMemoryManager(){
    var a : TestA;
    // var a1 = TestA::Create(10); // 调用copy函数, 然后调用destroy函数
    // a1.name = "a1";
    // test::Assert(bindings::GetReferenceCount(a1.data) == 1);

    // var a2 = a1; // 调用copy函数
    // a2.name = "a2";
    // test::Assert(bindings::GetReferenceCount(a1.data) == 2);

    // {
    //     var sub_a0 = a1; // 变量拷贝, 调用copy函数
    //     sub_a0.name = "sub_a0";
    //     test::Assert(bindings::GetReferenceCount(a1.data) == 3);

    //     TestA::Create(100); // 调用destroy 函数
    // }

    // test::Assert(bindings::GetReferenceCount(a1.data) == 2);
}

