interface Say{
    func say();
    func createSayObject()->Say;
}

struct SayHi{
}

implement Say for SayHi{
    func say() {
        "Hi\n".print();
    }

    func createSayObject()->Say{
        var ptr_object: ptr<SayHi>;
        ptr_object.raw_ptr = &this;
        return dynamic_cast<Say>(ptr_object);
    }
}

struct SayHello{}

implement Say for SayHello{
    func say(){
        "Hello\n".print();
    }

    func createSayObject()->Say{
        var ptr_object: ptr<SayHello>;
        ptr_object.raw_ptr = &this;
        return dynamic_cast<Say>(ptr_object);
    }
}

@test
func testDynamicDispatch(){
    var say_hi = ptr<SayHi>::new();
    say_hi.say();
    testing::assert(!say_hi.raw_ptr.isNull());

    var say: Say = dynamic_cast<Say>(say_hi);
    say.say();

    var say_hello = ptr<SayHello>::new();
    say_hello.say();

    say = dynamic_cast<Say>(say_hello);
    say.say();

    var say_hello2 = dynamic_cast<SayHello>(say);
    testing::assert(!say_hello2.isNull());
    say_hello2.say();

    var say_hi2 = dynamic_cast<SayHi>(say);
    testing::assert(say_hi2.isNull());

    var say_hi3: Say = say.createSayObject();
    say_hi3.say();
}
