interface Say{
    func say();
    func createSayObject()->Say;
}

struct SayHi{
}

implement Say for SayHi{
    func say() {
        "Hi\n".print();
    }

    func createSayObject()->Say{
        return dynamic_cast<Say>(&this);
    }
}

struct SayHello{}

implement Say for SayHello{
    func say(){
        "Hello\n".print();
    }

    func createSayObject()->Say{
        return dynamic_cast<Say>(&this);
    }
}

@test
func testDynamicDispatch(){
    var say_hi = allocator<SayHi>::allocate(1);
    (*say_hi).say();

    var say: Say = dynamic_cast<Say>(say_hi);
    say.say();

    var say_hello = allocator<SayHello>::allocate(1);
    (*say_hello).say();

    say = dynamic_cast<Say>(say_hello);
    say.say();

    var say_hello2 = dynamic_cast<SayHello>(say);
    testing::Assert(say_hello2.toi64() != 0);

    var say_hi2 = dynamic_cast<SayHi>(say);
    testing::Assert(say_hi2.toi64() == 0);

    var say_hi3: Say = (*say_hi).createSayObject();
    say_hi3.say();
}
