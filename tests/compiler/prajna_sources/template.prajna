
struct Node<T: template>{
    value: T;
    next: Node<T> *;
}

// 模板
implement Node<T: template>{
    func nextValue()->T{
        return (*this.next).value;
    }
}


template ArrayTp <T, Rank>{
    implement T[Rank]{
        func length2()->i64{
            return Rank;
        }
    }
}

instantiate ArrayTp<i64, 3>;

template ptrTp <Type>{
    implement Type* {
        @instruction("CastInst", "PtrToInt", "i64")
        func toi64()->i64;
    }
}

// instantiate ptrTp<i64>;

@test
func test(){
    var root: Node<f32>;
    root.value = 1.0;
    var next_node: Node<f32>;
    next_node.value = 2.0;
    root.next = &next_node;

    var t: i64[3];
    testing::Assert(t.length2() == 3);

    var tt: i64*;
    print(tt.toi64().tostr());

    testing::Assert(root.nextValue() == 2.0);
}

