use gpu;

@kernel
@target("nvptx")
func myKernel(tensor: gpu::Tensor<i64, 1>, value: i64){
    var idx = gpu::ThreadIndex()[0];
    tensor[idx] = value;
}

@test
func TestKernel(){
    var GridShape = [1,1,1];
    var BlockShape = [1,1,1];

    var shape = [1];
    var host_tensor = Tensor<i64, 1>::Create(shape);
    var gpu_tensor = host_tensor.ToGpu();
    var parameters: __raw_ptr<i8>[2];
    parameters[0] = __bit_cast<gpu::Tensor<i64, 1>* ,__raw_ptr<i8>>(&gpu_tensor);
    var value = 1023;
    parameters[1] = __bit_cast<__raw_ptr<i64> ,__raw_ptr<i8>>(&value);
    var parameters_ptr = &parameters[0];

    var re = gpu::LaunchKernel(__bit_cast<__raw_ptr<Func<gpu::Tensor<i64, 1>, i64, void>> ,__raw_ptr<i8>>(myKernel), GridShape, BlockShape, parameters_ptr);
    test::Assert(re == 0);

    host_tensor = gpu_tensor.ToHost();
    "\ndata[0] is: ".Print();
    host_tensor.At([0]).ToString().Print();
    "\n".Print();
}
