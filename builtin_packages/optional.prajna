template <ValueType>
struct Optional{
    _value : ValueType;
    _has_value : bool;
}

template <ValueType>
implement Optional<ValueType> {
    func __initialize__() {
        this._has_value = false;
    }

    func HasValue() -> bool{
        return this._has_value;
    }

    func __get__Value()->ValueType{
        "hit\n".Print();
        if (!this.HasValue()) {
            // TODO(张志敏): 属性赋值存在bug, 后续需要修复
            // debug::AssertWithMessage(false, "has no value");
        }
        return this._value;
    }

    func __set__Value(value:ValueType){
        this._has_value = true;
        this._value = value;
    }

    func Reset() {
        this._has_value = false;
    }

    @static
    func Create(value: ValueType) -> Optional<ValueType> {
        var optional: Optional<ValueType>;
        optional._value = value;
        return optional;
    }
}

