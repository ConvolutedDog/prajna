template <ValueType>
struct Optional{
    _value : ValueType;
    _hasvalue : bool;
}


template <ValueType>
implement Optional<ValueType>{
    @inline
    func __get__Value()->ValueType{
        __assert(this._hasvalue);
        return this._value;
    }

    @inline
    func __set__Value(value:ValueType){
        this._hasvalue = true;
        this._value = value;
    }
}

template <ValueType>
implement Optional<ValueType> {
    func HaveValue() -> bool{
        return this._hasvalue;
    }

    func Value_Or(default_value : ValueType) -> ValueType {
        if(!this.HaveValue()){
            return default_value;
        }else {
            return this._value;
        }
    }

    @static
    func Create(value: ValueType) -> Optional<ValueType> {
        var optional: Optional<ValueType>;
        optional._value = value;
        optional._hasvalue = true;
        return optional;
    }

}

template <ValueType>
implement Optional<ValueType> {
    func __initialize__() {
        this._hasvalue = false;
    }
}
