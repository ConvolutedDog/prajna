

template <Type, Length_>
struct Array{
    data: array<Type, Length_>;
}

template <Type, Length_>
implement Array<Type, Length_> {
    @inline
    func __get_linear_index__(idx: i64)->Type{
        return this.data[idx];
    }

    @inline
    func __set_linear_index__(idx: i64, value: Type){
        this.data[idx] = value;
    }
}

template <Type, Length_>
implement Array<Type, Length_>{
    @inline
    func Length()->i64{
        return Length_;
    }
}

template <Type, Length_>
implement Array<Type, Length_> {
    @inline
    func __add__(operand: Array<Type, Length_>)->Array<Type, Length_>{
        var re : Array<Type, Length_>;
        for i in 0 to this.Length() {
            re[i] = this[i] + operand[i];
        }

        return re;
    }
}

template <Type, Length_>
implement Array<Type, Length_> {
    @inline
    func __sub__(operand: Array<Type, Length_>)->Array<Type, Length_>{
        var re : Array<Type, Length_>;
        for i in 0 to this.Length() {
            re[i] = this[i] - operand[i];
        }

        return re;
    }
}

